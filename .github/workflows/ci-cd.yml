name: CI Testing and Auto-Fixing
'on':
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: {}
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  NODE_VERSION: '18'
  FIXER_API_ENDPOINT: https://webis-bndygehufph2bccs.westeurope-01.azurewebsites.net/api/ai-fix
  DEPLOYMENT_API_ENDPOINT: https://webis-bndygehufph2bccs.westeurope-01.azurewebsites.net/api/deploy
  MAX_FIX_ATTEMPTS: '3'
jobs:
  test-and-collect-errors:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Wait for additional commits
        run: echo "⏱️ Waiting for 2 minutes to ensure no additional commits are coming..."; sleep 120
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Dependencies
        run: npm install
      - name: Run Tests
        id: run-tests
        continue-on-error: true
        shell: bash
        run: |-

          if ! npm test > test.log 2>&1; then
            echo "Tests failed."
            echo "test-status=failed" >> $GITHUB_OUTPUT
          else
            echo "Tests passed."
            echo "test-status=passed" >> $GITHUB_OUTPUT
          fi
      - name: Run TypeScript Check and Collect Errors
        id: type-check
        continue-on-error: true
        shell: bash
        run: |-

          if ! npx tsc --noEmit --pretty false > type.log 2>&1; then
            echo "Found TypeScript errors."
            echo "has-errors=true" >> $GITHUB_OUTPUT
          fi
      - name: Run Build and Collect Errors
        id: build
        continue-on-error: true
        shell: bash
        run: |-

          if ! npm run build > build.log 2>&1; then
            echo "Found build errors."
            echo "has-errors=true" >> $GITHUB_OUTPUT
          fi
      - name: Process Error Logs and Build Payload
        id: process-errors
        if: steps.type-check.outputs.has-errors == 'true' || steps.build.outputs.has-errors == 'true'
        shell: bash
        run: |-

          set -e
          echo "🔍 Processing error logs and building payload..."
          sudo apt-get update && sudo apt-get install -y jq

          echo "=== type.log content ==="
          cat type.log || echo "no type.log"
          echo "=== build.log content ==="
          cat build.log || echo "no build.log"

          PROJECT_STRUCTURE=$(find . -type f -not -path "*/node_modules/*" -not -path "*/.git/*" | sort)

          jq -n   --arg projectName "${{ github.repository }}"   --arg repoName "${{ github.event.repository.name }}"   --arg commit "${{ github.sha }}"   --arg branch "${{ github.ref_name }}"   --arg projectStructure "$PROJECT_STRUCTURE"   --arg packageJson "$(cat package.json 2>/dev/null)"   --arg tsConfig "$(cat tsconfig.json 2>/dev/null)"   '{
              "projectName": $projectName,
              "repoName": $repoName,
              "commit": $commit,
              "branch": $branch,
              "errors": [],
              "projectStructure": $projectStructure,
              "packageJson": (try ($packageJson | fromjson) catch null),
              "tsConfig": (try ($tsConfig | fromjson) catch null)
            }' > error_payload.json

          process_typescript_errors() {
            if [[ -f "type.log" ]]; then
              echo "Parsing TypeScript errors..."
              while IFS= read -r line; do
                [[ $line =~ ^(.+)(([0-9]+),([0-9]+)): error [A-Za-z0-9]+: (.*)$ ]] && {
                  file="${BASH_REMATCH[1]}"
                  lineno="${BASH_REMATCH[2]}"
                  col="${BASH_REMATCH[3]}"
                  msg="${BASH_REMATCH[4]}"
                  jq --arg file "$file" --arg line "$lineno" --arg column "$col" --arg msg "$msg"           '.errors += [{"type":"type","file":$file,"line":($line|tonumber),"column":($column|tonumber),"message":$msg}]' error_payload.json > tmp && mv tmp error_payload.json
                }
              done < type.log
            fi
          }

          process_build_errors() {
            if [[ -f "build.log" ]]; then
              echo "Parsing build errors..."
              while IFS= read -r line; do
                [[ $line =~ ^([[:alnum:]._/\-]+.tsx?):([0-9]+):([0-9]+)s*-s*(.*)$ ]] && {
                  file="${BASH_REMATCH[1]}"
                  lineno="${BASH_REMATCH[2]}"
                  col="${BASH_REMATCH[3]}"
                  msg="${BASH_REMATCH[4]}"
                  jq --arg file "$file" --arg line "$lineno" --arg column "$col" --arg msg "$msg"           '.errors += [{"type":"build","file":$file,"line":($line|tonumber),"column":($column|tonumber),"message":$msg}]' error_payload.json > tmp && mv tmp error_payload.json
                }
              done < build.log
            fi
          }

          process_typescript_errors
          process_build_errors

          COUNT=$(jq '.errors | length' error_payload.json)
          echo "📊 Error processing complete. Found $COUNT errors."
          if [[ "$COUNT" -gt 0 ]]; then
            echo "payload-exists=true" >> $GITHUB_OUTPUT
          else
            echo "payload-exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Send Errors to AI Fixer API
        if: steps.process-errors.outputs.payload-exists == 'true'
        run: |-

          echo "🔧 Sending errors to AI Fixer API..."
          curl -s -X POST -H "Content-Type: application/json" -d @error_payload.json "${{ env.FIXER_API_ENDPOINT }}"
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        if: steps.process-errors.outputs.payload-exists == 'true' || steps.run-tests.outputs.test-status == 'failed'
        with:
          name: error-logs
          path: |-
            *.log
            error_payload.json
          retention-days: 7
